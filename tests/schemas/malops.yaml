MachineInboxModel: &MachineInbox
  type: object
  properties:
    '@class': { const: .MachineInboxModel }
    guid: { type: string }
    displayName: { type: string }
    osType: { enum: [ LINUX, OSX, WINDOWS ] }
    connected: { type: boolean }
    isolated: { type: boolean }
    lastConnected: { type: integer }
    empty: { type: boolean }

UserInboxModel: &UserInbox
  type: object
  properties:
    admin: { type: boolean }
    displayName: { type: string }
    domainUser: { type: boolean }
    guid: *CrGuid
    localSystem: { type: boolean }

MalopInboxModel: &MalopInbox
  type: object
  properties:
    '@class': { const: .MalopInboxModel }
    closed: { type: boolean }
    closerName:
      anyOf:
        - { type: string, format: email }
        - { const: Cybereason }
        - { type: 'null'}
    containers: { type: array }  # TODO
    creationTime: { type: integer }
    decisionStatuses: { type: array, items: { enum: [ Deleting on restart, Detected, Disinfect, Prevented, Quarantined ] } }
    detectionEngines: { type: array, items: *MalopDetectionEngine  }
    detectionTypes: { type: array, items: { type: string } }
    displayName: { type: string }
    edr: { type: boolean }
    empty: { type: boolean }
    escalated: { type: boolean }
    group: { type: string, format: uuid }
    guid: *CrGuid
    iconBase64:
      type: string
      media: { binaryEncoding: base64, type: image/png }
    labels: { type: array, items: { type: string }}
    lastUpdateTime: { type: integer }
    machines: { type: array, items: *MachineInbox }
    malopCloseTime: { type: [ integer, 'null' ] }
    malopDetectionType: *MalopDetectionType
    malopPriority: { enum: [ LOW, HIGH, '' ] }
    malopSeverity: { enum: [ Low, Medium, High, '' ] }
    malopStatus: { type: string }
    malopType: *MalopDetectionType
    primaryRootCauseName: { type: string }
    priority: { enum: [ LOW, HIGH, null ] }
    rootCauseElementHashes: { type: string }
    rootCauseElementNamesCount: { type: integer }
    rootCauseElementType: { enum: [ File, Process, Module, IpAddress ] }
    severity: { enum: [ Low, Medium, High, '' ] }
    status: { enum: [ Excluded, Active, Remediated, Closed ] }
    users: { type: array, items: *UserInbox }

BaseFileMalwareDataModel: &BaseFileMalwareDataModel
  type: object
  properties:
    '@class': { const: .BaseFileMalwareDataModel }
    detectionName: { type: [ string, 'null' ] }
    filePath: { type: string }
    type: *MalwareType

FilelessMalwareDataModel: &FilelessMalwareDataModel
  type: object
  properties:
    '@class': { const: .FilelessMalwareDataModel }
    description: { type: string }
    detectionRule: { type: string }
    module: { type: string }
    processName: { type: string }
    url: { type: [ string, 'null'] }

malops:
  type: array
  items: *MalopInbox

malop_v2: &MalopV2
  type: object
  properties:
    closerName:
      oneOf:
        - { type: string, format: email }
        - { type: 'null'}
    creationTime: { type: integer }
    decisionFeatures: { type: array, items: { type: string } }
    decisionStatuses: { type: array, items: { enum: [ Deleting on restart, Detected, Disinfect, Prevented, Quarantined ] } }
    detectionEngines: { type: array, items: *MalopDetectionEngine  }
    detectionType: *MalopDetectionType
    detectionTypes: { type: array, items: { type: string } }
    displayName: { type: string }
    escalated: { type: boolean }
    groups: { type: array, items: { type: string, format: uuid } }
    guid: *CrGuid
    iconBase64:
      oneOf:
        - type: string
          media: { binaryEncoding: base64, type: image/png }
        - type: 'null'
    investigationStatus: *MalopInvestigationStatus
    iocs: { type: array, items: { enum: [ File, Process, Module, IpAddress ] } }
    isEdr: { type: boolean }
    labels:
      type: array
      items:
        type: object
        properties:
          count: { type: integer }
          empty: { type: boolean }
          id: { type: integer }
          labelText: { type: string }
    lastUpdateTime: { type: integer }
    machines:
      type: array
      items:
        type: object
        properties:
          connected: { type: boolean }
          displayName: { type: string }
          guid: { type: string }
          isolated: { type: boolean }
          lastConnected: { type: integer }
          osType: { enum: [ LINUX, OSX, WINDOWS ] }
          pylumId: { type: string }
    metadataUpdateTime: { type: [ integer, 'null' ] }
    mitreSubTechniques: { type: array, items: { type: string } }
    mitreTactics: { type: array, items: { type: string } }
    mitreTechniques: { type: array, items: { type: string } }
    priority: { enum: [ LOW, HIGH, null ] }
    rootCauseElementHashes: { type: array, items: { type: string } }
    rootCauseElementType: { enum: [ File, Process, Module, IpAddress ] }
    severity: { enum: [ Low, Medium, High, '' ] }
    status: { enum: [ Excluded, Active, Remediated, Closed ] }
    users: { type: array, items: *UserInbox }

malops_v2:
  type: array
  items: *MalopV2

malware:
  type: array
  items:
    type: object
    properties:
      detectionEngine: { enum: [ AntiVirus, ApplicationControl, Script, StaticAnalysis ] }
      detectionValue: { type: string }
      detectionValueType: { enum: [ DVT_DOMAIN, DVT_FILE, DVT_SIGNATURE ] }
      elementType: { enum: [ File, Process] }  # process only in fileless malware
      id:
        type: object
        properties:
          guid: { type: string }
          timestamp: { type: integer }
          malwareType: *MalwareType
          elementType: { enum: [ File, Process] }
      guid: { type: string }
      machineName: { type: string }
      malwareDataModel: { oneOf: [ *BaseFileMalwareDataModel, *FilelessMalwareDataModel ] }
      name: { type: string }
      needsAttention: { type: boolean }
      referenceElementType: { enum: [ File, Process] }
      referenceGuid: { type: string }
      schedulerScan: { type: boolean }
      score: { type: [ number, 'null' ] }
      status: { enum: [ Detected, FailedToQuarantine, Prevented, Quarantined, Remediated ]}
      timestamp: { type: integer }
      type: *MalwareType

status:
  type: object
  properties:
    closerName: { oneOf: [ { type: string, format: email }, { type: 'null'} ] }
    closeTime: { type: [ integer, 'null' ] }
    empty: { type: boolean }
    investigationStatus: *MalopInvestigationStatus
    guid: *CrGuid
    lastUpdated: { type: integer }
    malopLabels: { type: array, items: { type: integer }}
    malopPriority: { enum: [ UNSPECIFIED ] }
    status: { enum: [ ACTIVE, CLOSED, FP, OPEN, REOPEN, RESOLVED, TODO, UNREAD ] }
    version: { type: integer }
